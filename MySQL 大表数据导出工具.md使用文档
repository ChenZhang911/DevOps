# MySQL 大表数据导出工具使用文档

## 工具概述

这是一个专业的 MySQL 大表数据导出工具，专门用于处理海量数据的导出任务。支持断点续传、磁盘空间监控、分文件导出等功能，确保大数据导出的稳定性和可靠性。

## 功能特性

- ✅ **大数据量支持** - 使用服务器端游标，减少内存占用
- ✅ **断点续传** - 支持从上次中断处继续导出
- ✅ **磁盘监控** - 实时监控磁盘空间，避免空间不足
- ✅ **分文件导出** - 自动分割大文件（默认2GB）
- ✅ **字段过滤** - 支持排除指定字段
- ✅ **进度保存** - 实时保存导出进度
- ✅ **完整日志** - 详细的运行日志记录

## 快速开始

### 1. 环境要求

```bash
# Python 3.6+
python3 --version

# 安装依赖
pip install pymysql
```

### 2. 基本用法

```bash
# 基本导出
python3 mysql_export.py \
    --host localhost \
    --port 3306 \
    --user root \
    --password your_password \
    --database your_database \
    --table your_table

# 排除指定字段
python3 mysql_export.py \
    --host localhost \
    --user root \
    --password your_password \
    --database your_database \
    --table your_table \
    --exclude created_time updated_time deleted_flag

# 断点续传
python3 mysql_export.py \
    --host localhost \
    --user root \
    --password your_password \
    --database your_database \
    --table your_table \
    --resume
```

## 参数详解

| 参数 | 必需 | 默认值 | 说明 |
|------|------|--------|------|
| `--host` | ✅ | 无 | MySQL 服务器地址 |
| `--port` | ❌ | 3306 | MySQL 服务器端口 |
| `--user` | ✅ | 无 | 数据库用户名 |
| `--password` | ✅ | 无 | 数据库密码 |
| `--database` | ✅ | 无 | 数据库名称 |
| `--table` | ✅ | 无 | 要导出的表名 |
| `--exclude` | ❌ | 无 | 要排除的字段列表 |
| `--resume` | ❌ | False | 启用断点续传模式 |

## 配置文件说明

### 导出文件格式

导出的 SQL 文件包含完整的 INSERT 语句：

```sql
-- MySQL数据导出
-- 表: your_table
-- 导出时间: 2024-01-20 10:30:00
-- 排除字段: ['sensitive_field']

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

INSERT INTO `your_table` (`id`, `name`, `email`) VALUES (1, '张三', 'zhangsan@example.com');
INSERT INTO `your_table` (`id`, `name`, `email`) VALUES (2, '李四', 'lisi@example.com');

SET FOREIGN_KEY_CHECKS = 1;
```

### 进度文件格式

断点续传时生成的进度文件（JSON格式）：

```json
{
  "file_index": 2,
  "processed_rows": 150000,
  "last_primary_key": 150000,
  "current_file_size": 104857600
}
```

## 使用示例

### 示例1：导出用户表

```bash
python3 mysql_export.py \
    --host 192.168.1.100 \
    --user admin \
    --password secure_password \
    --database app_db \
    --table users \
    --exclude password salt
```

### 示例2：续传大表导出

```bash
# 第一次运行（可能因故中断）
python3 mysql_export.py \
    --host localhost \
    --user root \
    --password 123456 \
    --database large_db \
    --table big_table

# 第二次运行（从断点继续）
python3 mysql_export.py \
    --host localhost \
    --user root \
    --password 123456 \
    --database large_db \
    --table big_table \
    --resume
```

### 示例3：生产环境使用

```bash
# 使用nohup后台运行
nohup python3 mysql_export.py \
    --host mysql-prod.example.com \
    --user exporter \
    --password ${DB_PASSWORD} \
    --database production \
    --table transaction_logs \
    > export.log 2>&1 &

# 查看导出进度
tail -f export.log
```

## 高级配置

### 修改默认参数

如需调整默认配置，可直接修改代码中的常量：

```python
class MySQLExporter:
    def __init__(self, host: str, port: int, user: str, password: str, database: str):
        # ...
        self.max_file_size = 2 * 1024 * 1024 * 1024  # 2GB，可调整为4GB
        self.min_disk_space = 10 * 1024 * 1024 * 1024  # 10GB，最小磁盘空间
        self.batch_size = 10000  # 每次查询的记录数，可根据网络调整
```

### 自定义导出逻辑

如需自定义导出逻辑，可继承 `MySQLExporter` 类：

```python
class CustomExporter(MySQLExporter):
    def generate_insert_statement(self, table: str, columns: List[str], row: tuple) -> str:
        # 自定义INSERT语句生成逻辑
        # 例如：批量INSERT、特殊字符处理等
        pass
```

## 监控和管理

### 查看导出状态

```bash
# 查看日志文件
tail -f mysql_export.log

# 查看生成的SQL文件
ls -la *_export_*.sql

# 检查进度文件
cat your_table_export_progress.json
```

### 导出进度解读

日志中的进度信息示例：
```
2024-01-20 10:30:00 - INFO - 表 users 总记录数: 1000000
2024-01-20 10:30:01 - INFO - 导出进度: 50000/1000000 (5.0%) - 文件: users_export_1.sql
2024-01-20 10:35:00 - INFO - 导出进度: 250000/1000000 (25.0%) - 文件: users_export_1.sql
```

## 故障排除

### 常见问题及解决方案

#### 1. 连接数据库失败
```bash
# 检查网络连接
ping mysql_host

# 检查MySQL服务状态
mysqladmin -h host -u user -p ping

# 验证凭据
mysql -h host -u user -p -D database
```

#### 2. 内存不足错误
- 减少 `batch_size` 参数值
- 确保使用服务器端游标（SSCursor）
- 监控系统内存使用情况

#### 3. 磁盘空间不足
```bash
# 清理磁盘空间
df -h  # 查看磁盘使用情况
du -sh /path/to/export/dir  # 查看导出目录大小

# 修改导出目录到更大磁盘
cd /large_disk/export_dir
python3 /path/to/mysql_export.py ...
```

#### 4. 权限问题
```sql
-- 确保用户有SELECT权限
GRANT SELECT ON database.table TO 'user'@'host';
FLUSH PRIVILEGES;
```

### 错误日志分析

查看 `mysql_export.log` 文件中的错误信息：

```log
# 连接错误
ERROR - 数据库连接失败: Access denied for user 'user'@'host'

# 表不存在错误
ERROR - 获取表信息失败: Table 'database.table' doesn't exist

# 磁盘空间错误
WARNING - 磁盘剩余空间不足10GB，当前剩余: 8.5GB
```

## 性能优化建议

### 1. 网络优化
- 在数据库服务器本地运行导出工具
- 使用千兆或万兆网络环境
- 调整 `batch_size` 参数（建议5000-20000）

### 2. 数据库优化
```sql
-- 在导出期间暂停备份
-- 调整MySQL缓冲区大小
SET GLOBAL read_buffer_size = 4194304;
SET GLOBAL sort_buffer_size = 4194304;
```

### 3. 系统优化
- 使用SSD硬盘存储导出文件
- 确保足够的内存和CPU资源
- 关闭不必要的系统服务

## 安全注意事项

### 1. 密码安全
```bash
# 使用环境变量传递密码
export DB_PASSWORD="your_password"
python3 mysql_export.py ... --password ${DB_PASSWORD}

# 或使用配置文件（确保文件权限）
chmod 600 db_config.conf
```

### 2. 文件权限
```bash
# 设置合适的文件权限
chmod 600 *.sql
chmod 600 mysql_export.log
```

### 3. 敏感数据处理
- 使用 `--exclude` 参数排除敏感字段
- 定期清理导出文件和日志
- 加密存储包含敏感数据的文件

## 批量处理脚本示例

### 批量导出多个表
```bash
#!/bin/bash
# batch_export.sh

TABLES=("users" "orders" "products" "logs")

for table in "${TABLES[@]}"; do
    echo "导出表: $table"
    python3 mysql_export.py \
        --host localhost \
        --user root \
        --password your_password \
        --database your_db \
        --table $table \
        --exclude created_time updated_time
    
    if [ $? -eq 0 ]; then
        echo "表 $table 导出成功"
    else
        echo "表 $table 导出失败"
        break
    fi
done
```

## 版本信息

- **版本**: 1.0
- **作者**: 自动化工具
- **更新日期**: 2024-01-20
- **依赖**: Python 3.6+, pymysql

---

*此工具适用于生产环境的大数据量导出任务，建议在测试环境充分验证后再用于生产环境。*
